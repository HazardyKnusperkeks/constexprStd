/**
 ** This file is part of the constexprStd project.
 ** Copyright 2017 Björn Schäpers <bjoern@hazardy.de>.
 **
 ** This program is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU Lesser General Public License as
 ** published by the Free Software Foundation, either version 3 of the
 ** License, or (at your option) any later version.
 **
 ** This program is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU Lesser General Public License for more details.
 **
 ** You should have received a copy of the GNU Lesser General Public License
 ** along with this program.  If not, see <http://www.gnu.org/licenses/>.
 **/

/**
 * @file
 * @brief Defines constexpr variants of the <functional>.
 */

#ifndef CONSTEXPRSTD_FUNCTIONAL
#define CONSTEXPRSTD_FUNCTIONAL

#include <functional>
#include <type_traits>
#include <utility>

#include "details/algorithm_forward.hpp"
#include "details/functional.hpp"
#include "iterator"

namespace constexprStd {
template<typename F, typename... Args>
constexpr decltype(auto) invoke(F&& f, Args&&... args) noexcept(std::is_nothrow_invocable_v<F, Args...>) {
	return details::invokeImpl(std::forward<F>(f), std::forward<Args>(args)...);
}

template<typename F>
constexpr decltype(auto) not_fn(F&& f)
		noexcept(std::is_nothrow_constructible_v<details::NotFnReturnType<F>, decltype(std::forward<F>(f))>) {
	return details::NotFnReturnType<F>{std::forward<F>(f)};
}

template<typename ForwardIter, typename BinaryPredicate = std::equal_to<>>
class default_searcher {
	private:
	ForwardIter SFirst;
	ForwardIter SLast;
	BinaryPredicate Pred;
	
	using DistType = decltype(constexprStd::distance(SFirst, SLast));
	DistType Dist;
	
	using CtorIsNoexcept = std::bool_constant<std::is_nothrow_copy_constructible_v<ForwardIter> &&
	                                          std::is_nothrow_move_constructible_v<BinaryPredicate> &&
	                                          noexcept(constexprStd::distance(SFirst, SLast)) &&
	                                          std::is_nothrow_copy_constructible_v<DistType>>;
	
	public:
	constexpr default_searcher(const ForwardIter pat_first, const ForwardIter pat_last,
	                           BinaryPredicate pred = BinaryPredicate{}) noexcept(CtorIsNoexcept::value) :
	                           SFirst(pat_first), SLast(pat_last), Pred(std::move(pred)),
	                           Dist(constexprStd::distance(SFirst, SLast)) {
		return;
	}
	
	template<typename Container>
	constexpr default_searcher(Container&& c, BinaryPredicate pred = BinaryPredicate{})
			noexcept(CtorIsNoexcept::value && noexcept(std::begin(std::forward<Container>(c))) &&
			         noexcept(std::end(std::forward<Container>(c)))) :
			default_searcher(std::begin(std::forward<Container>(c)), std::end(std::forward<Container>(c)),
			                 std::move(pred)) {
		return;
	}
	
	template<typename ForwardIter2>
	constexpr std::pair<ForwardIter2, ForwardIter2> operator()(const ForwardIter2 first, const ForwardIter2 last) const
			noexcept(noexcept(constexprStd::search(first, last, SFirst, SLast, Pred)) &&
			         noexcept(std::declval<ForwardIter2&>() == last) &&
			         noexcept(constexprStd::next(std::declval<ForwardIter2&>(), Dist)) &&
			         std::is_nothrow_constructible_v<std::pair<ForwardIter2, ForwardIter2>,
			                                         ForwardIter2, ForwardIter2>) {
		ForwardIter2 iter1 = constexprStd::search(first, last, SFirst, SLast, Pred);
		if ( iter1 == last ) {
			return {last, last};
		} //if ( iter1 == last )
		return {iter1, constexprStd::next(iter1, Dist)};
	}
	
	template<typename Container>
	constexpr auto operator()(Container&& c) const
			noexcept(noexcept(std::declval<default_searcher&>().operator()(std::begin(std::forward<Container>(c)),
			                                                               std::end(std::forward<Container>(c))))) {
		return operator()(std::begin(std::forward<Container>(c)), std::end(std::forward<Container>(c)));
	}
};

template<typename Container, typename BinaryPredicate = std::equal_to<>>
default_searcher(Container&& c, BinaryPredicate = BinaryPredicate{}) ->
	default_searcher<decltype(std::begin(std::forward<Container>(c))), BinaryPredicate>;
} //namespace constexprStd

#include "algorithm"

#endif
