/**
 ** This file is part of the constexprStd project.
 ** Copyright 2017 Björn Schäpers <bjoern@hazardy.de>.
 **
 ** This program is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU Lesser General Public License as
 ** published by the Free Software Foundation, either version 3 of the
 ** License, or (at your option) any later version.
 **
 ** This program is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU Lesser General Public License for more details.
 **
 ** You should have received a copy of the GNU Lesser General Public License
 ** along with this program.  If not, see <http://www.gnu.org/licenses/>.
 **/

/**
 * @file
 * @brief Defines constexpr variants of the <functional>.
 */

#ifndef CONSTEXPRSTD_FUNCTIONAL
#define CONSTEXPRSTD_FUNCTIONAL

#include <type_traits>
#include <utility>

#include "details/functional.hpp"

namespace constexprStd {
template<typename F, typename... Args>
constexpr decltype(auto) invoke(F&& f, Args&&... args) noexcept(std::is_nothrow_invocable_v<F, Args...>) {
	return details::invokeImpl(std::forward<F>(f), std::forward<Args>(args)...);
}

template<typename F>
constexpr decltype(auto) not_fn(F&& f)
		noexcept(std::is_nothrow_constructible_v<details::NotFnReturnType<F>, decltype(std::forward<F>(f))>) {
	return details::NotFnReturnType<F>{std::forward<F>(f)};
}
} //namespace constexprStd

#endif
