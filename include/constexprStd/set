/**
 ** This file is part of the constexprStd project.
 ** Copyright 2017 Björn Schäpers <bjoern@hazardy.de>.
 **
 ** This program is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU Lesser General Public License as
 ** published by the Free Software Foundation, either version 3 of the
 ** License, or (at your option) any later version.
 **
 ** This program is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU Lesser General Public License for more details.
 **
 ** You should have received a copy of the GNU Lesser General Public License
 ** along with this program.  If not, see <http://www.gnu.org/licenses/>.
 **/

/**
 * @file
 * @brief Contains the constexpr variants of <set>
 */

#ifndef CONSTEXPRSTD_SET
#define CONSTEXPRSTD_SET

#include <iterator>
#include <memory>

#include "details/set.hpp"
#include "memory"

namespace constexprStd {
template<typename Key, std::size_t N, typename Compare,
         template<typename, std::size_t> typename Allocator,
         typename NodeType = details::SetNode<Key>, std::size_t AllocN = N>
class set_base {
	public:
	using key_type               = Key;
	using value_type             = Key;
	using iterator               = details::SetNodeIterator<Key>;
	using const_iterator         = details::SetNodeIterator<Key>;
	using size_type              = std::size_t;
	using difference_type        = std::ptrdiff_t;
	using key_compare            = Compare;
	using value_compare          = Compare;
	using allocator_type         = Allocator<NodeType, AllocN>;
	using reference              = value_type&;
	using const_reference        = const value_type&;
	using pointer                = value_type*;
	using const_pointer          = const value_type*;
	using reverse_iterator       = std::reverse_iterator<iterator>;
	using const_reverse_iterator = std::reverse_iterator<const_iterator>;
	
	using CmpIsNoexcept       = std::bool_constant<noexcept(std::declval<Compare&>()(std::declval<const key_type&>(),
	                                                                                 std::declval<const key_type&>()))>;
	using AllocIsNoexcept     = std::bool_constant<noexcept(std::declval<allocator_type&>().allocate(1))>;
	using DestroyIsNoexcept   = std::bool_constant<
		noexcept(std::declval<allocator_type&>().destroy(std::declval<NodeType*>()))>;
	template<typename... Args>
	using CreateIsNoexcept = std::bool_constant<
		noexcept(std::declval<allocator_type&>().construct(std::declval<NodeType*>(), std::declval<Args&&>()...))>;
	
	private:
	allocator_type& Alloc;
	NodeType End{};
	NodeType *Root = &End;
	size_type Nodes = 0;
	value_compare Cmp;
	
	[[nodiscard]] constexpr std::pair<NodeType*, bool> findBestNode(const value_type& value) const
			noexcept(CmpIsNoexcept::value) {
		if ( empty() ) {
			return {Root, false};
		} //if ( empty() )
		return findBestNode(Root, value);
	}
	
	[[nodiscard]] constexpr std::pair<NodeType*, bool> findBestNode(NodeType *node, const value_type& value) const
			noexcept(CmpIsNoexcept::value) {
		if ( Cmp(value, node->getContent()) ) {
			return findBestNodeLeft(node, value);
		} //if ( Cmp(value, node->getContent()) )
		if ( Cmp(node->getContent(), value) ) {
			return findBestNodeRight(node, value);
		} //if ( Cmp(node->getContent(), value) )
		//The value is equal to the value of node
		return {node, true};
	}
	
	[[nodiscard]] constexpr std::pair<NodeType*, bool> findBestNodeLeft(NodeType *node, const value_type& value)
			const noexcept(CmpIsNoexcept::value) {
		if ( !node->LeftChild ) {
			return {node, false};
		} //if ( !node->LeftChild )
		return findBestNode(node->LeftChild, value);
	}
	
	[[nodiscard]] constexpr std::pair<NodeType*, bool> findBestNodeRight(NodeType *node, const value_type& value)
			const noexcept(CmpIsNoexcept::value) {
		if ( !node->RightChild ) {
			return {node, false};
		} //if ( !node->RightChild )
		return findBestNode(node->RightChild, value);
	}
	
	constexpr void detachEnd(void) noexcept {
		End.markForAdoption();
		return;
	}
	
	constexpr void attachEnd(void) noexcept {
		Root->rightestNode()->adoptRight(&End);
		return;
	}
	
	template<typename... Args>
	[[nodiscard]] constexpr NodeType* createNode(Args&&... args)
			noexcept(AllocIsNoexcept::value && CreateIsNoexcept<details::NodeTag, Args&&...>::value) {
		NodeType *ret = Alloc.allocate(1);
		Alloc.construct(ret, details::NodeTag{}, std::forward<Args>(args)...);
		return ret;
	}
	
	constexpr void destroyNodeRecursive(NodeType *node) noexcept(DestroyIsNoexcept::value) {
		if ( node == nullptr ) {
			return;
		} //if ( node == nullptr )
		destroyNodeRecursive(node->LeftChild);
		destroyNodeRecursive(node->RightChild);
		destroyNode(node);
		return;
	}
	
	constexpr void destroyNode(NodeType *node) noexcept(DestroyIsNoexcept::value) {
		node->reset();
		Alloc.destroy(node);
		Alloc.deallocate(node, 1);
		return;
	}
	
	template<typename T>
	[[nodiscard]] constexpr std::pair<iterator, bool> insertImpl(T&& value)
			noexcept(CmpIsNoexcept::value && noexcept(std::declval<set_base&>().createNode(std::forward<T>(value)))) {
		std::pair<NodeType*, bool> result = findBestNode(value);
		NodeType *node = result.first;
		if ( result.second ) {
			return {node, false};
		} //if ( result.second )
		
		auto newNode = createNode(std::forward<T>(value));
		++Nodes;
		if ( Cmp(newNode->getContent(), node->getContent()) ) {
			node->adoptLeft(newNode);
		} //if ( Cmp(newNode->getContent(), node->getContent()) )
		else {
			node->adoptRight(newNode);
		} //else -> if ( Cmp(newNode->getContent(), node->getContent()) )
		return {newNode, true};
	}
	
	public:
	explicit constexpr set_base(allocator_type& alloc) noexcept : set_base{Compare{}, alloc} {
		return;
	}
	
	explicit constexpr set_base(Compare cmp, allocator_type& alloc) noexcept : Alloc{alloc}, Cmp{std::move(cmp)} {
		End.Red = false;
		return;
	}
	
	[[nodiscard]] constexpr bool empty(void) const noexcept {
		return Nodes == 0;
	}
	
	[[nodiscard]] constexpr size_type size(void) const noexcept {
		return Nodes;
	}
	
	constexpr void clear(void) noexcept(DestroyIsNoexcept::value) {
		if ( empty() ) {
			return;
		} //if ( empty() )
		detachEnd();
		destroyNodeRecursive(Root);
		Root = &End;
		Nodes = 0;
		return;
	}
	
	constexpr std::pair<iterator, bool> insert(const value_type& value)
			noexcept(CmpIsNoexcept::value && noexcept(std::declval<set_base&>().createNode(value))) {
		if ( empty() ) {
			Root = createNode(value);
			Root->adoptRight(&End);
			Root->Red = false;
			Nodes = 1;
			return {Root, true};
		} //if ( empty() )
		
		detachEnd();
		auto ret = insertImpl(value);
		attachEnd();
		return ret;
	}
	
	constexpr std::pair<iterator, bool> insert(value_type&& value)
			noexcept(CmpIsNoexcept::value && noexcept(std::declval<set_base&>().createNode(value))) {
		if ( empty() ) {
			Root = createNode(std::move(value));
			Root->adoptRight(&End);
			Root->Red = false;
			Nodes = 1;
			return {Root, true};
		} //if ( empty() )
		
		detachEnd();
		auto ret = insertImpl(std::move(value));
		attachEnd();
		return ret;
	}
};

template<typename Key, std::size_t N, typename Compare = std::less<Key>,
         template<typename, std::size_t> typename Allocator = constexprStd::allocator>
class set : public set_base<Key, N, Compare, Allocator> {
	private:
	using Base = set_base<Key, N, Compare, Allocator>;
	
	typename Base::allocator_type Alloc;
	
	public:
	constexpr set(void) noexcept : Base{Alloc} {
		return;
	}
};

template<typename Key, std::size_t N, typename Compare = std::less<Key>,
         template<typename, std::size_t> typename Allocator = constexprStd::allocator>
class setDestroy : public set<Key, N, Compare, Allocator> {
	private:
	using Base = set<Key, N, Compare, Allocator>;
	
	public:
	constexpr setDestroy(void) noexcept = default;
	
	template<typename... Args>
	explicit constexpr setDestroy(Args&&... args) noexcept(std::is_nothrow_constructible_v<Base, Args&&...>) :
			Base{std::forward<Args>(args)...} {
		return;
	}
	
	~setDestroy(void) noexcept(noexcept(std::declval<Base&>().clear())) {
		Base::clear();
		return;
	}
};
} //namespace constexprStd

#endif
