/**
 ** This file is part of the constexprStd project.
 ** Copyright 2017 Björn Schäpers <bjoern@hazardy.de>.
 **
 ** This program is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU Lesser General Public License as
 ** published by the Free Software Foundation, either version 3 of the
 ** License, or (at your option) any later version.
 **
 ** This program is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU Lesser General Public License for more details.
 **
 ** You should have received a copy of the GNU Lesser General Public License
 ** along with this program.  If not, see <http://www.gnu.org/licenses/>.
 **/

/**
 * @file
 * @brief Contains the constexpr variants of <utility>
 */

#ifndef CONSTEXPRSTD_UTILITY
#define CONSTEXPRSTD_UTILITY

#include <utility>

namespace constexprStd {
template<typename T, typename U = T>
constexpr T exchange(T& object, U&& newValue) {
	T ret{std::move(object)};
	object = std::forward<U>(newValue);
	return ret;
}

template<typename T>
constexpr void swap(T& t1, T& t2)
		noexcept(std::conjunction_v<std::is_nothrow_move_constructible<T>, std::is_nothrow_move_assignable<T>>) {
	T temp{std::move(t1)};
	t1 = std::move(t2);
	t2 = std::move(temp);
	return;
}
} //namespace constexprStd

#endif
